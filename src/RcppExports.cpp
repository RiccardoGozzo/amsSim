// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// simulate_AMS
Rcpp::List simulate_AMS(int model, int n, double t, int p, double r, double sigma, double S0, Nullable<double> rho, int rim, double v0);
RcppExport SEXP _amsSim_simulate_AMS(SEXP modelSEXP, SEXP nSEXP, SEXP tSEXP, SEXP pSEXP, SEXP rSEXP, SEXP sigmaSEXP, SEXP S0SEXP, SEXP rhoSEXP, SEXP rimSEXP, SEXP v0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type model(modelSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type t(tSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type S0(S0SEXP);
    Rcpp::traits::input_parameter< Nullable<double> >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< int >::type rim(rimSEXP);
    Rcpp::traits::input_parameter< double >::type v0(v0SEXP);
    rcpp_result_gen = Rcpp::wrap(simulate_AMS(model, n, t, p, r, sigma, S0, rho, rim, v0));
    return rcpp_result_gen;
END_RCPP
}
// AMS
List AMS(int model, int type, int funz, int n, double t, int p, double r, double sigma, double S0, Nullable<double> rho, int rim, double v0, double Lmax, double strike, int K);
RcppExport SEXP _amsSim_AMS(SEXP modelSEXP, SEXP typeSEXP, SEXP funzSEXP, SEXP nSEXP, SEXP tSEXP, SEXP pSEXP, SEXP rSEXP, SEXP sigmaSEXP, SEXP S0SEXP, SEXP rhoSEXP, SEXP rimSEXP, SEXP v0SEXP, SEXP LmaxSEXP, SEXP strikeSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type model(modelSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    Rcpp::traits::input_parameter< int >::type funz(funzSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type t(tSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type S0(S0SEXP);
    Rcpp::traits::input_parameter< Nullable<double> >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< int >::type rim(rimSEXP);
    Rcpp::traits::input_parameter< double >::type v0(v0SEXP);
    Rcpp::traits::input_parameter< double >::type Lmax(LmaxSEXP);
    Rcpp::traits::input_parameter< double >::type strike(strikeSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(AMS(model, type, funz, n, t, p, r, sigma, S0, rho, rim, v0, Lmax, strike, K));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_amsSim_simulate_AMS", (DL_FUNC) &_amsSim_simulate_AMS, 10},
    {"_amsSim_AMS", (DL_FUNC) &_amsSim_AMS, 15},
    {NULL, NULL, 0}
};

RcppExport void R_init_amsSim(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
